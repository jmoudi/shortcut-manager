{"file":"/home/jm/Projects/Modules/common/src/functional/error.ts","mappings":";;AAQA;;;;;;;IAOI;AACJ,MAAM,MAAM,GAAG,CAAkB,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,EAAE;IACvD,OAAO;QACH,YAAY,IAAI,EAAE;QAClB,GAAG,OAAO,EAAE;QACZ,mBAAmB;QACnB,GAAG,IAAI;KACV,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAChB,CAAC,CAAA;AAED,SAAgB,WAAW,CAAU,IAAe,EAAE,OAAgB,EAAE,GAAG,IAAU;IACjF,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AAErD,CAAC;AAHD,kCAGC;AAID,SAAgB,kBAAkB,CAAY,GAAM;IAAG,OAAO,EAAE,CAAA;IAChE;;;;;;;;;;sBAUkB;AAClB,CAAC;AAZD,gDAYC;AACD,SAAgB,QAAQ,CAAU,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAa;IAChE,OAAO,IAAI,KAAK,CAAC,UAAU,IAAI;MAC7B,OAAO;iBACI,IAAI,EAAE,CAAC,CAAA;AACxB,CAAC;AAJD,4BAIC;AACD,SAAgB,UAAU,CAAU,IAAqB;IACrD,iCAAiC;IACjC,IAAI,GAAG,CAAC;IACR,MAAM,cAAc,GAAG,KAAK,CAAA;IAC5B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAC;QACzB,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;KACpD;IACD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAC;QACzB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACrC,SAAS,kBAAkB,CAAY,GAAM;YACzC,OAAO;gBACH,GAAG,cAAc,CAAC,IAAI,OAAO,IAAI,EAAE;gBACnC,GAAG,OAAO,EAAE;gBACZ,qBAAqB,IAAI,EAAE;aAC9B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChB,CAAC;KACJ;AACL,CAAC;AAjBD,gCAiBC;AACD;;;;;;;;;2BAS2B;AAE3B;;;;IAII","names":[],"sources":["/home/jm/Projects/Modules/common/src/functional/error.ts"],"sourcesContent":["\n\ntype CreateErrorInit = string | ErrorInit;\ninterface ErrorInit {\n\ttype: string;\n\tmessage?: string;\n\targs?: any[];\n}\n/* \nfunction formatErrorMessage1<T = Error>(err: T){\n    return [\n        `${errConstructor.name}:   ${type}`,\n        `${message}`,\n        `passed Arguments: ${args}`\n    ].join(`\\n`)\n} */\nconst format = <T extends Error>(type, message, ...args) => {\n    return [\n        `ERROR:   ${type}`,\n        `${message}`,\n        `passed Arguments:`,\n        ...args,\n    ].join(`\\n`)\n} \ntype ErrorType = string|number;\nexport function createError<T = any>(type: ErrorType, message?: string, ...args:any[]){    \n    return new Error(format(type, message, ...args));\n    \n}\n \n\n\nexport function formatErrorMessage<T = Error>(err: T){ return ``\n/*     const lines = [\n        `${name}:   ${type}`,\n        `${message}`,\n        `passed Arguments: ${args}`\n    ]\n    )\n}\n{ \n    type: err.name,\n    message: err.messagel\n    trace: err. */\n}\nexport function logError<T = any>({ type, message, args }: ErrorInit){\n    return new Error(`ERROR: ${type}\n    ${message}\n    Arguments: ${args}`)\n}\nexport function raiseError<T = any>(init: CreateErrorInit){\n    //Object.getPrototypeOf(err).name\n    let err;\n    const errConstructor = Error\n    if (typeof init === 'string'){\n        err = new Error(init); Object.getPrototypeOf(err)\n    }\n    if (typeof init === 'object'){\n        const { type, message, args } = init;\n        function formatErrorMessage<T = Error>(err: T){\n            return [\n                `${errConstructor.name}:   ${type}`,\n                `${message}`,\n                `passed Arguments: ${args}`\n            ].join(`\\n`)\n        }\n    }\n}\n/*         )\n        }\n        err = new Error(formatErrorMessage());\n        err.type = init.type;\n        err.arguments = init.arguments;\n\n    }\n    return new Error(`ERROR: ${type}\n    ${message}\n    Arguments: ${args}`) */\n \n/* export function createError<T = any>({ type, message, args }: ErrorInit){\n    return new Error(`ERROR: ${type}\n    ${message}\n    Arguments: ${args}`)\n} */"],"version":3}